#!/usr/bin/env ruby
#
# Copyright (c) 2012 Mark Heily <mark@heily.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

$VERBOSE = true
$LOAD_PATH << 'makeconf'

require 'makeconf'

# Return an authenticated or anonymous SVN URI
def svn(path)
  if ENV['USER'] == 'mheily'
    'svn+ssh://heily.com/home/mheily/svn/' + path
  else
    'svn://mark.heily.com/' + path
  end
end

# Return a libdispatch Test object
def dispatch_test(id, src)
  # Workaround for error compiling <TargetConditional.h>
  force_arm = '-DTARGET_CPU_ARM=1'

  Test.new(
    :id => id,
    :cflags => '-fblocks -Ilibdispatch -Ilibdispatch/include -IlibBlocksRuntime' + force_arm,
    :sources => [ src, 'dispatch_test.c' ].map { |p| 'libdispatch/testing/' + p },
    :ldadd => [ 'libdispatch/obj/local/armeabi/libdispatch.a' ]
    )
end

cc = CCompiler.new(
  :search => %w{clang gcc cc}
)

project = Project.new(
  :id => 'opengcd',
  :version => '0.1',
  :cc => cc
)

# Require the use of an unofficial Clang 3.2-based toolchain for Android.
if SystemType.host =~ /-androideabi$/
  begin
  project.ndk_toolchain_version = '3.2'
  rescue
    warn "*** A clang-based toolchain was not found. Please run 'make clang/build' and follow the directions to make a clang-based toolchain ***"

    project.add(
  # Build a clang compiler for Android
  Target.new('clang', [], [
	# Checkout LLVM
	#
	'mkdir clang',
	'cd clang && svn co -q http://llvm.org/svn/llvm-project/llvm/trunk llvm',

	#
	# Checkout clang
	#
        'cd clang/llvm/tools && svn co -q http://llvm.org/svn/llvm-project/cfe/trunk@161462 clang',

	#
	# Checkout compiler-rt
	#
	'cd clang/llvm/projects && svn co -q http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt'
      ]),

	#
	# Build everything 
	#
  Target.new('clang/build', ['clang'], [
	'mkdir clang/build', 
	'cd clang/build && \\',
	'../llvm/configure --target=arm-linux-androideabi  && \\',
	'make -j4'
      ])
    )

    Makeconf.configure project
    exit 0
  end
end


project.add(
  ExternalProject.new(
       :id => 'libBlocksRuntime',
       :uri => svn('libBlocksRuntime/trunk')
      ),
  ExternalProject.new(
       :id => 'libkqueue',
       :uri => svn('libkqueue/branches/stable')
      ),
  ExternalProject.new(
       :id => 'libpthread_workqueue',
       :uri => svn('libpthread_workqueue/trunk')
      ),
  ExternalProject.new(
       :id => 'libdispatch',
       :uri => 'file://libdispatch.tgz',
       :buildable => false,
       :patch => %w{ 
                      disable_dispatch_read.patch
                      libdispatch-r197_v2.patch
                      dispatch-workaround.diff
                      dispatch-spawn.diff
                      dispatch-atomic.diff
                      dispatch-semaphore.diff
                      dispatch-blocks.diff
                      dispatch-internal.diff
                    }.map { |path| 'patch/' + path },
     :configure => 'CC=' + project.cc.path +
       ' CFLAGS="--sysroot=' + project.cc.sysroot + ' -I../libkqueue/include -I../libpthread_workqueue/include -I../libBlocksRuntime"' +
       ' LIBS=""' +
       ' LDFLAGS="-Wl,-rpath-link=' + project.ndk_libdir + ' -L' + project.ndk_libdir + ' -L../libBlocksRuntime/obj/local/armeabi"' +
       ' ./configure'
      ),

  # Update all dependencies (TODO -- move into makeconf)
  Target.new('update', [], [
      'svn up',
      'cd libBlocksRuntime && svn up',
      'cd libkqueue && svn up',
      'cd libpthread_workqueue && svn up',
      ]),

#DEADWOOD---
  Target.new('libdispatchOLD', [], [
      # Use the same steps as the Debian build process
      'tar zxf libdispatch_0\~svn197.orig.tar.gz',
      'patch -p0 < patch/disable_dispatch_read.patch',
      'patch -p0 < patch/libdispatch-r197_v2.patch',
      'mv libdispatch-0~svn197 libdispatch',


      # Extra stuff for Android
      # Hopefully you have a recent copy of Autoconf that supports Android
      'cd libdispatch && patch -p0 < ../patch/dispatch-workaround.diff',
      'cd libdispatch && patch -p0 < ../patch/dispatch-spawn.diff',
      'cd libdispatch && patch -p0 < ../patch/dispatch-atomic.diff',
      'cd libdispatch && patch -p0 < ../patch/dispatch-semaphore.diff',
      'cd libdispatch && patch -p0 < ../patch/dispatch-blocks.diff',
      'cd libdispatch && patch -p0 < ../patch/dispatch-internal.diff',
      'cd libdispatch && autoreconf -fvi',

     'cd libdispatch && CC=$(CC)' +
       ' CFLAGS="-nostdlib -I../libkqueue/include -I../libpthread_workqueue/include -I../libBlocksRuntime"' +
       ' LIBS="-lBlocksRuntime"' +
       ' LDFLAGS="-Wl,-rpath-link=$(NDK_LIBDIR) -L$(NDK_LIBDIR) -L../libBlocksRuntime/obj/local/armeabi"' +
       ' ./configure --host=arm-linux-androideabi'
      ]),
  Library.new(
      :id => 'libdispatch',
      :cflags => '-fblocks -D__BLOCKS__ -I./libdispatch -I./libdispatch/src -I./libkqueue/include -I./libpthread_workqueue/include -I./libBlocksRuntime',
      :ldadd => ['libBlocksRuntime/obj/local/armeabi/libBlocksRuntime.a',
                 'libkqueue/obj/local/armeabi/libkqueue.a',
                 'libpthread_workqueue/obj/local/armeabi/libpthread_workqueue.a'],
      :sources => %w{ 
         apply.c
         benchmark.c
         object.c
         once.c
         queue.c
         queue_kevent.c
         semaphore.c
         source.c
         source_kevent.c
         time.c
         shims/mach.c
         shims/time.c
         shims/tsd.c
      }.map { |p| 'libdispatch/src/' + p }
  ),
  dispatch_test('dispatch-api', 'dispatch_api.c'),
  dispatch_test('dispatch-c99', 'dispatch_c99.c'),
  dispatch_test('dispatch-cascade', 'dispatch_cascade.c'),
  dispatch_test('dispatch-debug', 'dispatch_debug.c'),
  dispatch_test('dispatch-priority', 'dispatch_priority.c'),
#FIXME:dispatch_test('dispatch-priority2', 'dispatch_priority.c'),
  dispatch_test('dispatch-starfish', 'dispatch_starfish.c'),
  dispatch_test('dispatch-after', 'dispatch_after.c'),
  dispatch_test('dispatch-apply', 'dispatch_apply.c'),
  dispatch_test('dispatch-drift', 'dispatch_drift.c'),
  dispatch_test('dispatch-group', 'dispatch_group.c'),
  dispatch_test('dispatch-pingpong', 'dispatch_pingpong.c'),
#FIXME: broken on Linux w old libkqueue
#  dispatch_test('dispatch-read', 'dispatch_read.c'),
  dispatch_test('dispatch-readsync', 'dispatch_readsync.c'),
  dispatch_test('dispatch-sema', 'dispatch_sema.c'),
  dispatch_test('dispatch-timer_bit31', 'dispatch_timer_bit31.c'),
  dispatch_test('dispatch-timer_bit63', 'dispatch_timer_bit63.c')
)

Makeconf.configure(project)
