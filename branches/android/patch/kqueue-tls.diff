Index: src/common/kevent.c
===================================================================
--- src/common/kevent.c	(revision 553)
+++ src/common/kevent.c	(working copy)
@@ -36,23 +36,23 @@
 static char *
 kevent_filter_dump(const struct kevent *kev)
 {
-    static char __thread buf[64];
+    char *buf = tls_get_buf(64);
 
-    snprintf(&buf[0], sizeof(buf), "%d (%s)", 
+    snprintf(buf, 64, "%d (%s)", 
             kev->filter, filter_name(kev->filter));
-    return (&buf[0]);
+    return (buf);
 }
 
 static char *
 kevent_fflags_dump(const struct kevent *kev)
 {
-    static char __thread buf[1024];
+    char *buf = tls_get_buf(1024);
 
 #define KEVFFL_DUMP(attrib) \
     if (kev->fflags & attrib) \
     strncat(buf, #attrib" ", 64);
 
-    snprintf(buf, sizeof(buf), "fflags=0x%04x (", kev->fflags);
+    snprintf(buf, 1024, "fflags=0x%04x (", kev->fflags);
     if (kev->filter == EVFILT_VNODE) {
         KEVFFL_DUMP(NOTE_DELETE);
         KEVFFL_DUMP(NOTE_WRITE);
@@ -79,13 +79,13 @@
 static char *
 kevent_flags_dump(const struct kevent *kev)
 {
-    static char __thread buf[1024];
+    char *buf = tls_get_buf(1024);
 
 #define KEVFL_DUMP(attrib) \
     if (kev->flags & attrib) \
 	strncat(buf, #attrib" ", 64);
 
-    snprintf(buf, sizeof(buf), "flags=0x%04x (", kev->flags);
+    snprintf(buf, 1024, "flags=0x%04x (", kev->flags);
     KEVFL_DUMP(EV_ADD);
     KEVFL_DUMP(EV_ENABLE);
     KEVFL_DUMP(EV_DISABLE);
@@ -106,9 +106,9 @@
 const char *
 kevent_dump(const struct kevent *kev)
 {
-    static char __thread buf[1024];
+    char *buf = tls_get_buf(1024);
 
-    snprintf(buf, sizeof(buf), 
+    snprintf(buf, 1024, 
             "{ ident=%d, filter=%s, %s, %s, data=%d, udata=%p }",
             (u_int) kev->ident,
             kevent_filter_dump(kev),
@@ -322,5 +322,6 @@
     kqueue_unlock(kq);
     kqueue_put(kq);
     (void) pthread_setcancelstate(cancelstate, NULL);
+    tls_free_buf();
     return (nret);
 }
Index: src/common/kqueue.c
===================================================================
--- src/common/kqueue.c	(revision 553)
+++ src/common/kqueue.c	(working copy)
@@ -30,10 +30,10 @@
 #include "sys/event.h"
 #include "private.h"
 
-#ifndef NDEBUG
 int KQUEUE_DEBUG = 0;
-#endif
 
+pthread_key_t KQ_TLS_KEY;
+
 static RB_HEAD(kqt, kqueue) kqtree       = RB_INITIALIZER(&kqtree);
 static pthread_rwlock_t     kqtree_mtx   = PTHREAD_RWLOCK_INITIALIZER;
 
@@ -178,6 +178,8 @@
     if (pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &cancelstate) != 0)
         return (-1);
 
+	(void) pthread_key_create(&KQ_TLS_KEY, NULL);
+
     kq = calloc(1, sizeof(*kq));
     if (kq == NULL)
         return (-1);
Index: src/common/private.h
===================================================================
--- src/common/private.h	(revision 553)
+++ src/common/private.h	(working copy)
@@ -80,7 +80,52 @@
 # define reset_errno()           ;
 #endif 
 
+/* ------------ begin: tls_buf.c (TODO) ---------------------------*/
 
+/* A thread-local buffer for debugging purposes */
+extern pthread_key_t KQ_TLS_KEY;
+struct tls_buf {
+	off_t pos;		/* Index of the next available byte in the buffer */
+	char  buf[32768];
+};
+
+/* Get a pointer to a thread-specific string buffer. */
+static inline char *
+tls_get_buf(size_t sz)
+{
+	struct tls_buf *tb;
+	char *p;
+
+	tb = pthread_getspecific(KQ_TLS_KEY);
+	if (tb == NULL) {
+		tb = calloc(1, sizeof(*tb));
+		(void) pthread_setspecific(KQ_TLS_KEY, tb);
+	}
+
+	if (sz > sizeof(tb->buf)) 
+		return NULL;
+
+	p = &tb->buf[tb->pos];
+	tb->pos += sz;
+	if (tb->pos > sizeof(tb->buf)) 
+		return NULL;
+
+	return (p);
+}
+
+/* Free all previously allocated buffers */
+static inline void
+tls_free_buf(void)
+{
+	struct tls_buf *tb;
+
+	tb = pthread_getspecific(KQ_TLS_KEY);
+	if (tb != NULL) 
+		tb->pos = 0;
+}
+
+/* ------------ end: tls_buf.c (TODO) ---------------------------*/
+
 struct kqueue;
 struct kevent;
 struct evfilt_data;
Index: src/linux/socket.c
===================================================================
--- src/linux/socket.c	(revision 553)
+++ src/linux/socket.c	(working copy)
@@ -37,7 +37,7 @@
 static char *
 epoll_event_dump(struct epoll_event *evt)
 {
-    static char __thread buf[128];
+    char *buf = tls_get_buf(128);
 
     if (evt == NULL)
         return "(null)";
@@ -46,7 +46,7 @@
     if (evt->events & attrib) \
        strcat(&buf[0], #attrib" ");
 
-    snprintf(&buf[0], 128, " { data = %p, events = ", evt->data.ptr);
+    snprintf(buf, 128, " { data = %p, events = ", evt->data.ptr);
     EPEVT_DUMP(EPOLLIN);
     EPEVT_DUMP(EPOLLOUT);
 #if defined(HAVE_EPOLLRDHUP)
@@ -56,7 +56,7 @@
     EPEVT_DUMP(EPOLLET);
     strcat(&buf[0], "}\n");
 
-    return (&buf[0]);
+    return (buf);
 #undef EPEVT_DUMP
 }
 
Index: src/linux/vnode.c
===================================================================
--- src/linux/vnode.c	(revision 553)
+++ src/linux/vnode.c	(working copy)
@@ -38,13 +38,13 @@
 static char *
 inotify_mask_dump(uint32_t mask)
 {
-    static char __thread buf[1024];
+    char *buf = tls_get_buf(1024);
 
 #define INEVT_MASK_DUMP(attrib) \
     if (mask & attrib) \
        strcat(buf, #attrib" ");
 
-    snprintf(buf, sizeof(buf), "mask = %d (", mask);
+    snprintf(buf, 1024, "mask = %d (", mask);
     INEVT_MASK_DUMP(IN_ACCESS);
     INEVT_MASK_DUMP(IN_MODIFY);
     INEVT_MASK_DUMP(IN_ATTRIB);
@@ -65,9 +65,9 @@
 static char *
 inotify_event_dump(struct inotify_event *evt)
 {
-    static char __thread buf[1024];
+    char *buf = tls_get_buf(1024);
 
-    snprintf(buf, sizeof(buf), "wd=%d mask=%s", 
+    snprintf(buf, 1024, "wd=%d mask=%s", 
             evt->wd,
             inotify_mask_dump(evt->mask));
 
Index: src/linux/timer.c
===================================================================
--- src/linux/timer.c	(revision 553)
+++ src/linux/timer.c	(working copy)
@@ -38,7 +38,7 @@
 static char *
 itimerspec_dump(struct itimerspec *ts)
 {
-    static char __thread buf[1024];
+    char buf = tls_get_buf(1024);
 
     snprintf(buf, sizeof(buf),
             "itimer: [ interval=%lu s %lu ns, next expire=%lu s %lu ns ]",
