Index: src/posix/timer.c
===================================================================
--- src/posix/timer.c	(revision 554)
+++ src/posix/timer.c	(working copy)
@@ -22,6 +22,7 @@
 #include <stdio.h>
 #include <sys/queue.h>
 #include <sys/socket.h>
+#include <sys/time.h>
 #include <sys/types.h>
 #include <string.h>
 #include <time.h>
@@ -36,6 +37,8 @@
     int         wfd;            /* fd to wake up when sleep is over */
     uintptr_t   ident;          /* from kevent */
     intptr_t    interval;       /* sleep time, in milliseconds */
+    pthread_cond_t  cond;
+    pthread_mutex_t mtx;
     struct sleepstat *stat;
 };
 
@@ -48,45 +51,59 @@
 static void *
 sleeper_thread(void *arg)
 {
-    struct sleepreq sr;
+    struct sleepreq *sr = (struct sleepreq *) arg;
     struct sleepinfo si;
-    struct timespec req, rem;
+    struct timeval now;
+    struct timespec req;
     sigset_t        mask;
     ssize_t         cnt;
     bool            cts = true;     /* Clear To Send */
     char            buf[1];
+	int rv;
 
+#if 0
     pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, NULL);
+#endif
 
-    /* Copyin the request */
-    memcpy(&sr, arg, sizeof(sr));
-    free(arg);
-
     /* Initialize the response */
-    si.ident = sr.ident;
+    si.ident = sr->ident;
     si.counter = 0;
 
-    /* Convert milliseconds into seconds+nanoseconds */
-    req.tv_sec = sr.interval / 1000;
-    req.tv_nsec = (sr.interval % 1000) * 1000000;
-
     /* Block all signals */
     sigfillset(&mask);
     (void) pthread_sigmask(SIG_BLOCK, &mask, NULL);
 
     for (;;) {
 
+        pthread_mutex_lock(&sr->mtx);
+
+        /* Convert the timeout into an absolute time */
+        /* Convert milliseconds into seconds+nanoseconds */
+        gettimeofday(&now, NULL);
+        req.tv_sec  = now.tv_sec + sr->interval / 1000;
+        req.tv_nsec = now.tv_usec + ((sr->interval % 1000) * 1000000);
+
         /* Sleep */
-        if (nanosleep(&req, &rem) < 0) {
-            //TODO: handle spurious wakeups
-            dbg_perror("nanosleep(2)");
+        dbg_printf("sleeping for %ld ms", sr->interval);
+		rv = pthread_cond_timedwait(&sr->cond, &sr->mtx, &req);
+        pthread_mutex_unlock(&sr->mtx);
+        if (rv == 0) {
+            /* _timer_delete() has requested that we terminate */
+            dbg_puts("terminating sleeper thread");
+            break;
+        } else if (rv != 0) {
+            dbg_printf("rv=%d %s", rv, strerror(rv));
+			if (rv == EINTR)
+                abort(); //FIXME should not happen
+
+			//ASSUME: rv == ETIMEDOUT
         }
         si.counter++;
         dbg_printf(" -------- sleep over (CTS=%d)----------", cts);
 
         /* Test if the previous wakeup has been acknowledged */
         if (!cts) {
-            cnt = read(sr.wfd, &buf, 1);
+            cnt = read(sr->wfd, &buf, 1);
             if (cnt < 0) {
                 if (errno == EAGAIN || errno == EWOULDBLOCK) {
                     ;
@@ -104,7 +121,7 @@
 
         /* Wake up kevent waiters if they are ready */
         if (cts) {
-            cnt = write(sr.wfd, &si, sizeof(si));
+            cnt = write(sr->wfd, &si, sizeof(si));
             if (cnt < 0) {
                 /* FIXME: handle EAGAIN */
                 dbg_perror("write(2)");
@@ -116,6 +133,7 @@
         }
     }
 
+    dbg_puts("sleeper thread exiting");
     return (NULL);
 }
 
@@ -123,6 +141,7 @@
 _timer_create(struct filter *filt, struct knote *kn)
 {
     pthread_attr_t attr;
+    pthread_t tid;
     struct sleepreq *req;
     kn->kev.flags |= EV_CLEAR;
 
@@ -135,10 +154,13 @@
     req->wfd = filt->kf_wfd;
     req->ident = kn->kev.ident;
     req->interval = kn->kev.data;
+    kn->data.sleepreq = req;
+    pthread_cond_init(&req->cond, NULL);
+    pthread_mutex_init(&req->mtx, NULL);
 
     pthread_attr_init(&attr);
     pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
-    if (pthread_create(&kn->data.tid, &attr, sleeper_thread, req) != 0) {
+    if (pthread_create(&tid, &attr, sleeper_thread, req) != 0) {
         dbg_perror("pthread_create");
         pthread_attr_destroy(&attr);
         free(req);
@@ -152,12 +174,14 @@
 static int
 _timer_delete(struct knote *kn)
 {
-    if (pthread_cancel(kn->data.tid) != 0) {
-        /* Race condition: sleeper_thread exits before it is cancelled */
-        if (errno == ENOENT)
-            return (0);
-        dbg_perror("pthread_cancel(3)");
-        return (-1);
+    if (kn->data.sleepreq != NULL) {
+        dbg_puts("deleting timer");
+        pthread_mutex_lock(&kn->data.sleepreq->mtx); //FIXME - error check
+        pthread_cond_signal(&kn->data.sleepreq->cond); //FIXME - error check
+        pthread_mutex_unlock(&kn->data.sleepreq->mtx); //FIXME - error check
+        pthread_cond_destroy(&kn->data.sleepreq->cond); //FIXME - error check
+        free(kn->data.sleepreq);
+        kn->data.sleepreq = NULL;
     }
     return (0);
 }
Index: src/common/private.h
===================================================================
--- src/common/private.h	(revision 554)
+++ src/common/private.h	(working copy)
@@ -84,6 +84,7 @@
 struct kqueue;
 struct kevent;
 struct evfilt_data;
+struct sleepreq;
 
 /* 
  * Flags used by knote->flags
@@ -104,7 +105,7 @@
             off_t     size;   /* Used by vnode */
         } vnode;
         timer_t       timerid;  
-        pthread_t     tid;          /* Used by posix/timer.c */
+        struct sleepreq *sleepreq; /* Used by posix/timer.c */
     } data;
     TAILQ_ENTRY(knote) event_ent;    /* Used by filter->kf_event */
     RB_ENTRY(knote)   kntree_ent;   /* Used by filter->kntree */
